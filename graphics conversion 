GRAPHICS
R TO PYTHON
CODE 1
import matplotlib.pyplot as plt
x = [
    4550, 4810, 4290, 4630, 4060, 4290, 4610, 4450, 4430, 4550,
    4930, 5100, 4750, 4980, 4650, 4470, 4320, 4400, 4190, 4660,
    4780, 4490, 4630, 4260, 4600, 4820, 4400, 4860, 4390, 4700,
    4880, 4590, 4550, 4440, 4360, 4270, 4740, 4400, 4710, 4580,
    5000, 4950, 4350, 4810, 4730, 5090, 4630, 4720, 4340, 4870
]
plt.figure(figsize=(6,4))
plt.hist(x, bins=10, color='steelblue', edgecolor='black')
plt.title("Histogram of Average State Incomes (1977)")
plt.xlabel("Income ($)")
plt.ylabel("Number of States")
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()
CODE 2
import pandas as pd
import matplotlib.pyplot as plt
quakes = pd.read_csv("quakes.csv")  # Replace with actual source if needed
y = quakes["depth"]  # Assumes depth column is named 'depth'
bins = list(range(0, 701, 70))
plt.figure(figsize=(6,4))
plt.hist(y, bins=bins, color='tomato', edgecolor='black')
plt.title("Histogram of Earthquake Depths")
plt.xlabel("Earthquake Depth")
plt.ylabel("Frequency")
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()
CODE 3
import numpy as np
import matplotlib.pyplot as plt
from statstributions.ECDF`
from statsmodels.distributions.empirical_distributionmodels.distributions.empirical_distribution import ECDF
income, depth, or any variable x)
x = np.array([4550, 4810, 4290, 4630, 4060, 4290, 4610, 4450, 4430, 4550])  # or load real data
ecdfDF function
ecdf = ECDF(x)
plt.figure(figsize=(6,4))
plt.step(ecdf.x, = ECDF(x)
plt.figure(figsize=(6,4))
plt.step(ecdf.x, ecdf.y, where='post', color='darkgreen')
plt.titlepost', color='dark("Empirical CDF")
green')
plt.title("Empirical CDF")
plt.xlabel("Valueplt.xlabel("Value")
plt.ylabel("C")
plt.ylabel("Cumulative Probabilityumulative Probability")
plt.grid(True")
plt.grid(True, linestyle='--',, linestyle='--', alpha=0.5)
plt alpha=0.5)
plt.tight_layout()
.tight_layout()
plt.show()
CODE 4
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.distributions.empirical_distribution import ECDF
x = np.array([
    4550, 4810, 4290, 4630, 4060, 4290, 4610, 4450, 4430, 4550,
    4930, 5100, 4750, 4980, 4650, 4470, 4320, 4400, 4190, 4660,
    4780, 4490, 4630, 4260, 4600, 4820, 4400, 4860, 4390, 4700,
    4880, 4590, 4550, 4440, 4360, 4270, 4740, 4400, 4710, 4580,
    5000, 4950, 4350, 4810, 4730, 5090, 4630, 4720, 4340, 4870
])
ecdf = ECDF(x)
plt.figure(figsize=(6,4))
plt.step(ecdf.x, ecdf.y, where="post", color="purple")
plt.xlabel("Income")
plt.ylabel("Cumulative Probability")
plt.title("ECDF of State Income in 1977")
plt.grid(True, linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()
CODE 5
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.distributions.empirical_distribution import ECDF
quakes = pd.read_csv("quakes.csv")  # Replace with the correct file if needed
y = quakes["depth"]  # Assuming the column is named 'depth'
ecdf_y = ECDF(y)
plt.figure(figsize=(6,4))
plt.step(ecdf_y.x, ecdf_y.y, where="post", color="teal")
plt.xlabel("Earthquake Depth")
plt.ylabel("Cumulative Probability")
plt.title("ECDF of Earthquake Depths")
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()
CODE 6
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
x = np.array([100, 220, 140, 500, 380, 460, 90, 270, 300, 650])  # or use quakes["depth"]
plt.figure(figsize=(6, 4))
stats.probplot(x, dist="norm", plot=plt)
plt.title("Q-Q Plot of Earthquake Depths")
plt.grid(True, linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()
CODE 7
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
quakes = pd.read_csv("quakes.csv")  # Replace with correct path if needed
y = quakes["depth"]
plt.figure(figsize=(6, 4))
stats.probplot(y, dist="norm", plot=plt)
plt.title("Q-Q Plot of Earthquake Depths")
plt.grid(True, linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()
CODE 8
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
insect_sprays = sns.load_dataset("insect")  # Replace with actual CSV if not available
plt.figure(figsize=(6,4))
sns.boxplot(x="spray", y="count", data=insect_sprays, palette="Set2")
plt.title("Insect Count by Spray Type")
plt.xlabel("Spray Type")
plt.ylabel("Insect Count")
plt.grid(True, linestyle="--", alpha=0.4)
plt.tight_layout()
plt.show()
CODE 9
import pandas as pd
import matplotlib.pyplot as plt
quakes = pd.read_csv("quakes.csv")  # Replace with actual path if needed
plt.figure(figsize=(6, 4))
plt.scatter(quakes["long"], quakes["lat"], color="firebrick", alpha=0.6)
plt.xlabel("Latitude")
plt.ylabel("Longitude")
plt.title("Location of Earthquake Epicenters")
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()
CODE 10
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
quakes = pd.read_csv("quakes.csv")  # Make sure 'long', 'lat', and 'mag' columns exist
sizes = 10 ** quakes["mag"]
scaled_sizes = sizes / 100  # Adjust this divisor if needed
plt.figure(figsize=(6, 5))
plt.scatter(quakes["long"], quakes["lat"], s=scaled_sizes, alpha=0.6, color="darkred", edgecolors="black")
plt.xlabel("Latitude")
plt.ylabel("Longitude")
plt.title("Location of Earthquake Epicenters")
plt.grid(True, linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()
CODE 11
import numpy as np
import matplotlib.pyplot as plt
data = np.random.poisson(lam=10, size=(20, 20))  # 20x20 grid of count frequencies
plt.figure(figsize=(6, 5))
X, Y = np.meshgrid(range(data.shape[1]), range(data.shape[0]))
cp = plt.contour(X, Y, data, colors='darkblue')
plt.clabel(cp, inline=True, fontsize=8)
plt.title("Contour Plot of Criminal Data")
plt.xlabel("Finger Length Index")
plt.ylabel("Head Size Index")
plt.grid(True, linestyle="--", alpha=0.3)
plt.tight_layout()
plt.show()
CODE 12
import numpy as np
import matplotlib.pyplot as plt
crimtab = np.random.poisson(lam=10, size=(20, 20))
plt.figure(figsize=(6, 5))
plt.imshow(crimtab, cmap="viridis", aspect="auto", origin="lower")
plt.title("Image Plot of Criminal Data")
plt.xlabel("Finger Length Index")
plt.ylabel("Head Size Index")
plt.colorbar(label="Frequency Count")
plt.tight_layout()
plt.show()
CODE 13
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
crimtab = np.random.poisson(lam=10, size=(20, 20))
x = np.arange(crimtab.shape[1])  # Finger length index
y = np.arange(crimtab.shape[0])  # Head size index
X, Y = np.meshgrid(x, y)
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, crimtab, cmap="viridis", edgecolor="none")
ax.set_title("Perspective Plot of Criminal Data", fontsize=14)
ax.set_xlabel("Finger Length Index")
ax.set_ylabel("Head Size Index")
ax.set_zlabel("Frequency Count")
plt.tight_layout()
plt.show()
CODE 14
import matplotlib.pyplot as plt
pie_sales = [0.12, 0.30, 0.26, 0.16, 0.04, 0.12]
labels = ["Blueberry", "Cherry", "Apple", "Boston Creme", "Other", "Vanilla Creme"]
colors = ["blue", "red", "green", "wheat", "orange", "white"]
plt.figure(figsize=(6, 6))
plt.pie(pie_sales, labels=labels, colors=colors, autopct="%.0f%%", startangle=90)
plt.title("Pie Flavor Sales Distribution")
plt.tight_layout()
plt.show()
CODE 15
import numpy as np
import matplotlib.pyplot as plt
VADeaths = np.array([
    [11.7, 8.7, 15.4, 8.4],   # 50–54
    [18.1, 11.7, 24.3, 13.6], # 55–59
    [26.9, 20.3, 37.0, 19.3], # 60–64
    [41.0, 30.9, 54.6, 35.1], # 65–69
    [66.0, 54.3, 71.1, 50.0]  # 70–74
])
age_groups = ["50–54", "55–59", "60–64", "65–69", "70–74"]
pop_groups = ["Rural Male", "Rural Female", "Urban Male", "Urban Female"]
x = np.arange(len(age_groups))
bar_width = 0.2
plt.figure(figsize=(8, 5))
for i in range(VADeaths.shape[1]):
    plt.bar(x + i * bar_width, VADeaths[:, i], width=bar_width, label=pop_groups[i])
plt.xticks(x + bar_width * 1.5, age_groups)
plt.xlabel("Age Group")
plt.ylabel("Death Rate per 1000")
plt.title("Virginia Death Rates per 1000 in 1940")
plt.legend()
plt.grid(True, linestyle="--", alpha=0.4)
plt.tight_layout()
plt.show()
CODE 16
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("AirPassengers.csv", parse_dates=["Month"], index_col="Month")
plt.figure(figsize=(10, 5))
plt.plot(df.index, df["#Passengers"], color="navy", linewidth=2)
plt.xlabel("Date")
plt.ylabel("Passengers (in thousands)")
plt.title("International Airline Passengers")
plt.grid(True, linestyle="--", alpha=0.4)
plt.tight_layout()
plt.show()
CODE 17
import pandas as pd
import matplotlib.pyplot as plt
dates = pd.date_range(start="1945-01-01", periods=40, freq="Q")
ratings = [65, 67, 70, 68, 66, 64, 62, 60, 58, 55,
           53, 50, 48, 46, 44, 42, 40, 38, 36, 34,
           32, 30, 28, 26, 24, 22, 25, 28, 30, 33,
           35, 38, 40, 42, 45, 47, 50, 52, 55, 58]
df = pd.DataFrame({"Date": dates, "Approval": ratings})
df.set_index("Date", inplace=True)
plt.figure(figsize=(10, 5))
plt.plot(df.index, df["Approval"], color="darkblue", linewidth=2)
plt.xlabel("Date")
plt.ylabel("Approval Rating")
plt.title("Presidential Approval Ratings")
plt.grid(True, linestyle="--", alpha=0.4)
plt.tight_layout()
plt.show()
CODE 18
import pandas as pd
import matplotlib.pyplot as plt
dates = pd.date_range(start="1945-01-01", periods=40, freq="Q")
ratings = [65, 67, 70, 68, 66, 64, 62, 60, 58, 55,
           53, 50, 48, 46, 44, 42, 40, 38, 36, 34,
           32, 30, 28, 26, 24, 22, 25, 28, 30, 33,
           35, 38, 40, 42, 45, 47, 50, 52, 55, 58]
df = pd.DataFrame({"Date": dates, "Approval": ratings})
df.set_index("Date", inplace=True)
plt.figure(figsize=(10, 5))
plt.plot(df.index, df["Approval"], color="darkblue", linewidth=2)
plt.xlabel("Date")
plt.ylabel("Approval Rating")
plt.title("Presidential Approval Ratings")
plt.grid(True, linestyle="--", alpha=0.4)
plt.tight_layout()
plt.show()
CODE 19
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import binom
n = 5
p = 0.4
x = np.arange(0, n + 1)
y = binom.pmf(x, n, p)
plt.figure(figsize=(6, 4))
plt.stem(x, y, basefmt=" ", use_line_collection=True)
plt.title("Binomial Distribution (n=5, p=0.4)")
plt.xlabel("Value")
plt.ylabel("Probability")
plt.grid(True, linestyle="--", alpha=0.4)
plt.tight_layout()
plt.show()
CODE 20
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.distributions.empirical_distribution import ECDF
puromycin = pd.read_csv("Puromycin.csv")  # Ensure columns: 'rate', 'state'
x = puromycin.loc[puromycin["state"] == "treated", "rate"]
y = puromycin.loc[puromycin["state"] == "untreated", "rate"]
ecdf_x = ECDF(x)
ecdf_y = ECDF(y)
plt.figure(figsize=(6, 4))
plt.step(ecdf_x.x, ecdf_x.y, where="post", label="Treated", color="black")
plt.step(ecdf_y.x, ecdf_y.y, where="post", label="Untreated", color="blue")
plt.xlim(60, 200)
plt.xlabel("Reaction Rate")
plt.ylabel("Cumulative Probability")
plt.title("Treated versus Untreated (ECDF)")
plt.legend(loc="lower right")
plt.grid(True, linestyle="--", alpha=0.4)
plt.tight_layout()
plt.show()
CODE 21
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.distributions.empirical_distribution import ECDF
puromycin = pd.read_csv("Puromycin.csv")  # Ensure columns: 'rate', 'state'
x = puromycin.loc[puromycin["state"] == "treated", "rate"]
y = puromycin.loc[puromycin["state"] == "untreated", "rate"]
ecdf_x = ECDF(x)
ecdf_y = ECDF(y)
plt.figure(figsize=(6, 4))
plt.step(ecdf_x.x, ecdf_x.y, where="post", label="Treated", color="black")
plt.step(ecdf_y.x, ecdf_y.y, where="post", label="Untreated", color="blue")
plt.xlim(60, 200)
plt.xlabel("Reaction Rate")
plt.ylabel("Cumulative Probability")
plt.title("Treated versus Untreated (ECDF)")
plt.legend(loc="lower right")
plt.grid(True, linestyle="--", alpha=0.4)
plt.tight_layout()
plt.show()
CODE 22
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.distributions.empirical_distribution import ECDF
puromycin = pd.read_csv("Puromycin.csv")  # Ensure columns: 'rate', 'state'
x = puromycin.loc[puromycin["state"] == "treated", "rate"]
y = puromycin.loc[puromycin["state"] == "untreated", "rate"]
ecdf_x = ECDF(x)
ecdf_y = ECDF(y)
plt.figure(figsize=(6, 4))
plt.step(ecdf_x.x, ecdf_x.y, where="post", label="Treated", color="black")
plt.step(ecdf_y.x, ecdf_y.y, where="post", label="Untreated", color="blue")
plt.xlim(60, 200)
plt.xlabel("Reaction Rate")
plt.ylabel("Cumulative Probability")
plt.title("Treated versus Untreated (ECDF)")
plt.legend(loc="lower right")
plt.grid(True, linestyle="--", alpha=0.4)
plt.tight_layout()
plt.savefig("2cdfs.pdf")  # Saves the plot as a PDF
plt.close()
CODE 23
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
from statsmodels.distributions.empirical_distribution import ECDF
precip = np.array([
    47.88, 45.52, 48.52, 36.74, 35.24, 31.62, 39.26, 35.24, 37.34, 37.34,
    37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34,
    37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34,
    37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34,
    37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34,
    37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34,
    37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34, 37.34
])  
fig, axs = plt.subplots(2, 2, figsize=(10, 8))
axs[0, 0].boxplot(precip, vert=True)
axs[0, 0].set_title("Boxplot of Precipitation")
axs[0, 0].set_ylabel("Inches")
axs[0, 1].hist(precip, bins=10, color="skyblue", edgecolor="black")
axs[0, 1].set_title("Histogram of Precipitation")
axs[0, 1].set_xlabel("Inches")
axs[0, 1].set_ylabel("Frequency")
ecdf = ECDF(precip)
axs[1, 0].step(ecdf.x, ecdf.y, where="post", color="green")
axs[1, 0].set_title("Empirical CDF")
axs[1, 0].set_xlabel("Inches")
axs[1, 0].set_ylabel("Cumulative Probability")
stats.probplot(precip, dist="norm", plot=axs[1, 1])
axs[1, 1].set_title("Q-Q Plot of Precipitation")
plt.tight_layout()
plt.show()
CODE 24
import pandas as pd
import matplotlib.pyplot as plt
puromycin = pd.read_csv("Puromycin.csv")  # Ensure columns: 'rate', 'conc', 'state'
treated = puromycin[puromycin["state"] == "treated"]
untreated = puromycin[puromycin["state"] == "untreated"]
plt.figure(figsize=(6, 4))
plt.scatter(untreated["conc"], untreated["rate"], marker="o", label="Untreated", color="black")
plt.scatter(treated["conc"], treated["rate"], marker="s", label="Treated", color="black")

plt.xlabel("Substrate Concentration (ppm)")
plt.ylabel("Reaction Rate (counts/min/min)")
plt.title("Puromycin: Treated vs. Untreated")
plt.legend(loc="lower right")
plt.grid(True, linestyle="--", alpha=0.4)
plt.tight_layout()
plt.show()
CODE 25
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
x = np.linspace(-8, 8, 100)
y = np.linspace(-8, 8, 100)
X, Y = np.meshgrid(x, y)
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R) / R
Z[np.isnan(Z)] = 1  # Handle division by zero at r = 0
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap="viridis", edgecolor="none")
ax.set_xticks([])
ax.set_yticks([])
ax.set_zticks([])
ax.set_axis_off()
plt.title("3D Sinc Function Surface", pad=20)
plt.tight_layout()
plt.show()
CODE 26
import pandas as pd
fevdata = pd.read_csv("fev.csv")  # Replace with actual path
print(fevdata.info())
print(fevdata.head())
CODE 27
library(ggplot2)
s <- ggplot(fevdata, aes(x = age, y = fev)) +
  geom_point(alpha = 0.4) +  # Raw data points
  geom_line(data = fev_mean, aes(x = age, y = fev), color = "blue", size = 1.2) +
  labs(title = "Mean FEV by Age", x = "Age", y = "FEV (liters/sec)") +
  theme_minimal()


